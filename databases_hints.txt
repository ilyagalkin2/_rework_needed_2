#MySQL SetUp is:
#MariaDB Java Client

#to run the Docker image
#docker run --name mysql-registration -d -p 3306:3306 -e MYSQL_DATABASE=registration -e MYSQL_USER=someuser -e MYSQL_PASSWORD=somepass yobasystems/alpine-mariadb

#properties
#spring.datasource.url = jdbc:mysql://localhost:3306/registration
#spring.datasource.username = someuser
#spring.datasource.password = somepass
#spring.jpa.hibernate.ddl-auto = create
#spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.format_sql = true










create database somedb;

CREATE USER 'someuser'@'localhost' IDENTIFIED BY 'somepass';

GRANT ALL ON somedb.* TO 'someuser'@'localhost';

use somedb;








create table if not exists Users (
	id int primary key auto_increment,
	name varchar(20) not null,
	phone varchar(20) default null
);





insert into Users (name, phone) values
	('User1', '125453'),
	('User2', '654321'),
	('User3', null);






update Users 	
	set name =  'Ne User2', phone = '+79991112233'
	where id=1;
	




DELETE FROM Users where id < 3;


select * from Users;

insert into Users (name, phone) values
	('User1', '125453'),
	('User2', '654321');
	
select id, name, phone from Users;
select id, phone from Users;
select id, name, phone from Users where name like '%User2%';

update Users 	
	set name =  'User3', phone = '+79991112233'
	where id=7;
	

select id, name, phone
	from Users
	WHERE 
		name not like '%User1%'
		AND 
		phone is not null;
		
		
		

\ - end of line














// PostgreSQL SetUp is:
docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=somepass -e POSTGRES_USER=someuser -e POSTGRES_DB=somedb -d postgres:alpine
5432 is already in use by real PostgreSQL

docker run --name postgres -p 8088:5432 -e POSTGRES_PASSWORD=somepass -e POSTGRES_USER=someuser -e POSTGRES_DB=somedb -d postgres:alpine







#if PostgreSQL installed
#spring.datasource.url = jdbc:postgresql://localhost:5432/registration
#if postgres:alpine installed (see on PostgreSQL's web site) -- and we assign port 8088
# docker run --name postgres -p 8088:5432 -e POSTGRES_PASSWORD=somepass -e POSTGRES_USER=someuser -e POSTGRES_DB=registration -d postgres:alpine
#spring.datasource.url = jdbc:postgresql://localhost:8088/registration
#spring.datasource.username = someuser
#spring.datasource.password = somepass
#spring.jpa.hibernate.ddl-auto = create
#spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.format_sql = true














create table IF NOT EXISTS "Users" (
    id INT GENERATED ALWAYS AS IDENTITY,
    name varchar(20) not null,
    PRIMARY KEY(id)
);

create table "Contacts" (
    id INT generated always as identity,
    "customerId" INT,
    "contactName" VARCHAR(255) not null,
    phone VARCHAR(15),
    email VARCHAR(100),
    primary key (id),
    constraint "fk_Users_Contacts"
        foreign key ("customerId")
        references "Users" (id)
);







insert into "Users" (name) values
	('User1'),
	('User2'),
	('User3');


insert into "Contacts" ("customerId", "contactName", phone, email) values
    (1, 'First', '+7 9** *** ***1', 'user01@gmail.com'),
    (1, 'Second', '+7 9** *** ***2', 'user02@gmail.com'),
    (3, 'Main', '+7 9** *** ***3', 'user03@gmail.com');



select * from "Users" u left join "Contacts" c ON c."customerId" = u.id;
select * from "Users" u right join "Contacts" c ON c."customerId" = u.id;

select * from "Users" u inner join "Contacts" c ON c."customerId" = u.id;
select * from "Users" u join "Contacts" c ON c."customerId" = u.id;





select u.* from "Users" u left join "Contacts" c ON c."customerId" = u.id;
select c.* from "Users" u left join "Contacts" c ON c."customerId" = u.id;
select u.*,c.* from "Users" u left join "Contacts" c ON c."customerId" = u.id;
select * from "Users" u left join "Contacts" c ON c."customerId" = u.id;

select u.* as user, c.* as cont from "Users" u left join "Contacts" c ON c."customerId" = u.id;

select u.id as "uId", u.name as "Users->name", c.id as "contactId", c."contactName", c.phone, c.email from "Users" u left join "Contacts" c ON c."customerId" = u.id;

select u.id as "Users->id", u.name as "uName", c.id as "contactId", c."contactName", c.phone, c.email from "Users" u left join "Contacts" c ON c."customerId" = u.id;



select u.id as "Users->id", u.name as "uName", c.id as "contactId", c."contactName", c.phone, c.email from "Users" u left join "Contacts" c ON c."customerId" = u.id order by "Users->id"





